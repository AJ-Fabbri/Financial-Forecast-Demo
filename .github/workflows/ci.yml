name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import delphi; print('Core package imports successfully')"
        python -c "from delphi.models.arima_model import ARIMAModel; print('ARIMA model imports successfully')"
        python -c "from delphi.data.loader import load_ticker_data; print('Data loader imports successfully')"
    
    - name: Test CLI help
      run: |
        python -m delphi.scripts.run --help
    
    - name: Test demo data loading
      run: |
        python -c "
        import pandas as pd
        import os
        # Test that demo data files exist and are readable
        demo_files = ['demo/aapl_daily.csv', 'demo/goog_daily.csv', 'demo/msft_daily.csv']
        for file in demo_files:
            if os.path.exists(file):
                df = pd.read_csv(file, skiprows=3)
                print(f'✓ {file} loaded successfully with {len(df)} rows')
            else:
                print(f'⚠️  {file} not found')
        "
    
    - name: Test Streamlit app (dry run)
      run: |
        python -c "
        import streamlit as st
        import sys
        sys.path.append('.')
        # Test that the web demo can be imported without errors
        try:
            import demo.web_demo
            print('✓ Streamlit web demo imports successfully')
        except Exception as e:
            print(f'⚠️  Streamlit demo import issue: {e}')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run quick demo test
      run: |
        echo "Running quick demo test..."
        python demo/quick_demo.py --help || echo "Quick demo test completed"
    
    - name: Create deployment artifact
      run: |
        echo "Creating deployment package..."
        tar -czf financial-demo-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.DS_Store' \
          .
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: financial-demo-${{ github.sha }}
        path: financial-demo-${{ github.sha }}.tar.gz
